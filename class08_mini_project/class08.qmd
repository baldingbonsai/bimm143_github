---
title: "Class 8: Breast Cancer Mini Project"
author: "Michael McClellan (PID: A169692395)"
format: pdf
toc: true
---

## Background 

This source provides materials for a class mini-project focused on unsupervised learning analysis of human breast cancer cell data. Students will conduct principal component analysis (PCA) for dimensionality reduction and then apply hierarchical and k-means clustering techniques. The project involves exploratory data analysis, interpreting PCA results, evaluating clustering performance by comparing cluster assignments to actual diagnoses, and optionally combining PCA with clustering. The goal is to identify potential groupings within the cell data based on their characteristics without prior knowledge of malignancy, and the project concludes with an application of the PCA model to classify new patient samples.

## Data Import

Our data comes from the University of Wisconsin Medical Center

```{r}
wisc.df <- read.csv("WisconsinCancer.csv", row.names=1)
```

> Q1. How many patients/samples are in this dataset? 

```{r}
nrow(wisc.df)
```

> Q2. How many of the observations have a malignant diagnosis?

```{r}
table(wisc.df$diagnosis)
```

```{r}
sum(wisc.df$diagnosis == "M")
```

> Q3. How many variables/features in the data are suffixed with `mean`?

```{r}
colnames(wisc.df)
```

```{r}
length(grep("mean", colnames(wisc.df), value = T))
```

There is a diagnosis column that is the clinician consensus that I want to exclude from any further analysis. We will come back later and compare our results to this diagnosis.

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)
head(diagnosis)
```

Now we can remove it from the `wisc.df`

```{r}
wisc.data <- wisc.df[,-1]
```

## Clustering 

Let's try a `hclust()`
```{r}
hc <- hclust(dist(wisc.data))
plot(hc)
```

We can extract clusters from this rather poor dendrogram/tree with `cutree()` 

```{r}
grps <- cutree(hc, k=2)
```

How many individuals in each cluster?

```{r}
table(grps)
```

```{r}
table(diagnosis)
```

We can generate a cross-table that compares our cluster `grps` vector with our `diagnosis` vector values. 

```{r}
table(diagnosis, grps)
```

## Principle Component Analysis

### The importance of data scaling

The main function for PCA in base R is `prcomp()` it has a default input parameter of `scale=FALSE`. 

```{r}
# prcomp()
head(mtcars)
```

We could do a PCA of this data as is and it could be mis-leading...

```{r}
pc <- prcomp(mtcars)
biplot(pc)
```

Let's look at the mean values of each column and their standard deviation. 

```{r}
colMeans(mtcars)
```

```{r}
apply(mtcars, 2, sd)
```

We can "scale" this data before PCA to get a much better representation and analysis of of all the columns.

```{r}
mtscale <- scale(mtcars)
```

```{r}
colMeans(mtscale)
```

```{r}
apply(mtscale, 2, sd)
```

```{r}
pc.scale <- prcomp(mtscale)
```

We can look at the two main analysis results figures from PCA - the "PC plot" (aka score plot, ordination plot, or PC1 vs. PC2 plot). The "loadings plot" how the original variables contribute to the new PCs. 

A loadings plot of the unscaled PCA results 
```{r}
library(ggplot2)

ggplot(pc$rotation) +
  aes(PC1, rownames(pc$rotation)) + 
  geom_col()
```

Loadings plot of the scaled data. 

```{r}
ggplot(pc.scale$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```

PC plot of scaled PCA results
```{r}
library(ggrepel)

ggplot(pc.scale$x) + 
  aes(PC1, PC2, label=rownames(pc.scale$x)) +
  geom_point() + 
  geom_text_repel() 
```

> **Key point**: In general we will set `scale=TRUE` when we do PCA. This is not the default but probably should be...

We can check the SD and mean of the different columns in `wisc.data` to see if we need to scale - hint: we do!

### PCA of wisc.data

```{r}
wisc.pr <- prcomp(wisc.data, scale=TRUE)
```

To see how well PCA is doing here in terms capturing the variance(or spread) in the data we can use the `summary()` function. 

```{r}
summary(wisc.pr)
```

Let's make the main PC1 vs. PC2 figure.  

```{r}
ggplot(wisc.pr$x) + 
  aes(PC1, PC2, col=diagnosis) +
  geom_point() +
  xlab("PC1 (44.3%)")
  ylab("PC2 (19%)")
```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

```{r}
summary(wisc.pr)
```
0.4427

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

PC3 Cumulative Proportion = 0.72636, so PC1 + PC2 + PC3 are required

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

PC7 Cumulative Proportion = 0.91010, so PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 are required

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

```{r}
biplot(wisc.pr)
```

It is very difficult to read and understand because the data points are all overlapping with one another and cannot be distinguished from each other.

> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
ggplot(wisc.pr$x) + 
  aes(PC1, PC3, col=diagnosis) +
  geom_point() +
  xlab("PC1 (44.3%)")
  ylab("PC3 (9.4%)")
```

There is a noticeable separation between the benign and malignant (looks like they are separated into 2 groups). 

> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation["concave.points_mean", 1]
```

> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

```{r}
summary(wisc.pr)
```

The cumulative score of PC5 is 0.84734, which is the combined scores of PC1 + PC2 + PC3 + PC4 + PC5. So, you would need 5 PCs. 

## 5. Combining methods

We can take our PCA results and use them as a basis set

### Clustering on PCA results

```{r}
wisc.pr.hclust <- hclust(dist(wisc.pr$x[, 1:2]), method="ward.D2")
plot(wisc.pr.hclust)
```

We can "cut" this tree to yield our clusters (groups):

```{r}
pc.grps <- cutree(wisc.pr.hclust, k=2)
table(pc.grps)
```

How do my cluster grps compare to the expert diagnosis

```{r}
table(diagnosis, pc.grps)
```

```{r}
table(diagnosis)
```

```{r}
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=4)
table(wisc.pr.hclust.clusters, diagnosis)
```

> Q13. Which method gives your favorite results for the same data `data.dist` dataset? Explain your reasoning. 

The ward.D2 method gives good results for the `data.dist` dataset because it minimizes the variance within the clusters, making them more neat and compact in comparison to the other methods listed (single, complete, average).  

> Q15. How well does the newly created model with four clusters separate out the two diagnoses? 

The newly created model with four clusters makes it more difficult to separate out the two diagnoses because there are now 3 groups (out of 4) that have both benign and malignant cases. The distinction (compared to when there were 2 groups) is not as clear now. 

> Q16. How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.

They did really badly. We do much better after PCA - the new PCA variables (what we call a basis set) give us much better separation of M and B. 

```{r}
table(wisc.pr.hclust.clusters, diagnosis)
wisc.km <- kmeans(wisc.data, centers= 2, nstart= 20)
table(wisc.km$cluster, diagnosis)

```

## 7. Prediction

We can use our PCA model for the analysis of new "unseen" data. In this case from U. Mich.

```{r}
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

> Q18. Which of these new patients should we prioritize for follow up based on your results?

You should prioritize PC1 patients because that group has the highest malignant to benign ratio (130 to 1), where almost all of the patients in that group (130) are malignant cases.